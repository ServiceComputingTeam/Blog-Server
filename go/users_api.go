/*
 * Blog for service computing
 *
 *
 *
 * API version: 1.0.0
 * Contact: 895118352@qq.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/gorilla/mux"
)

func UserLogin(w http.ResponseWriter, r *http.Request) {
	// FIXME:: cheak the username and password
	username := r.URL.Query().Get("username")
	password := r.URL.Query().Get("password")
	if username == "" || password == "" {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	if flag, _ := DBcheakUsernameAndPassWord(username, password); flag {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
	} else {
		w.WriteHeader(http.StatusBadRequest)
	}
}

func CreateUser(w http.ResponseWriter, r *http.Request) {
	var user User
	re, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(re, &user)
	fmt.Println(err, user)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	// FIXME: create an user
	if newUser, err := DBCreateUser(&user); err == nil {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		buf, _ := json.Marshal(newUser)
		w.WriteHeader(http.StatusCreated)
		w.Write(buf)
	} else {
		w.WriteHeader(http.StatusBadRequest)
	}
}

func GetBlogByUser(w http.ResponseWriter, r *http.Request) {
	username := r.Header.Get("username")
	if username == "" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	fmt.Println("auth:", username)
	// FIXME: query blogs by auth username
	if blogs, err := DBgetBlogByAuthor(username); err == nil {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		buf, _ := json.Marshal(blogs)
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
	} else {
		w.WriteHeader(http.StatusBadRequest)
	}

}

func GetBlogByUsername(w http.ResponseWriter, r *http.Request) {
	data := mux.Vars(r)
	username := data["username"]
	fmt.Println(username)
	// FIXME: query blogs by username
	if blogs, err := DBgetBlogByAuthor(username); err == nil {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		buf, _ := json.Marshal(blogs)
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
	} else {
		w.WriteHeader(http.StatusBadRequest)
	}
}

func PublishBlog(w http.ResponseWriter, r *http.Request) {
	username := r.Header.Get("username")
	if username == "" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	re, _ := ioutil.ReadAll(r.Body)
	var newBlog Blog
	err := json.Unmarshal(re, &newBlog)
	newBlog.Createtime = time.Now()
	newBlog.Owner = username
	fmt.Println(newBlog, err)
	// FIXME: add the blog to database
	if newBlog, err := DBCreateBlog(&newBlog); err == nil {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		buf, _ := json.Marshal(newBlog)
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
	} else {
		w.WriteHeader(http.StatusBadRequest)
	}
}

func UpdateUser(w http.ResponseWriter, r *http.Request) {
	username := r.Header.Get("username")
	if username == "" {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}
	var user User
	re, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(re, &user)
	fmt.Println(err, user)
	// TODO: update user info
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
